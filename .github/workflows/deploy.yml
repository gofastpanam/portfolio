name: üöÄ Deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

permissions: read-all

jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üîê Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: fail

      - name: üè∑Ô∏è Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DOCKER_COMPOSE_FILE=docker-compose.yaml" >> $GITHUB_ENV
            echo "APP_ENV=${{ secrets.APP_ENV_PRODUCTION }}" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/opt/portfolio" >> $GITHUB_ENV
          else
            echo "DOCKER_COMPOSE_FILE=docker-compose.staging.yaml" >> $GITHUB_ENV
            echo "APP_ENV=${{ secrets.APP_ENV_STAGING }}" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/opt/portfolio" >> $GITHUB_ENV
          fi

      - name: üöÄ Deploy to Server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          APP_ENV: ${{ env.APP_ENV }}
          DOCKER_COMPOSE_FILE: ${{ env.DOCKER_COMPOSE_FILE }}
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
        run: |
          # Se connecter au serveur et ex√©cuter les commandes
          ssh $SSH_USER@$SSH_HOST "\
            cd $DEPLOY_PATH && \
            docker compose -f $DOCKER_COMPOSE_FILE pull && \
            docker compose -f $DOCKER_COMPOSE_FILE up -d && \
            docker system prune -f"

      - name: üè• Health Check
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DEPLOY_URL: ${{ github.ref == 'refs/heads/main' && 'http://localhost:3000' || 'http://localhost:3001' }}
        run: |
          # Attendre que l'application soit pr√™te
          echo "Waiting for application to be ready..."
          sleep 10
          
          # V√©rifier que l'application r√©pond
          ssh $SSH_USER@$SSH_HOST "curl -sSf $DEPLOY_URL > /dev/null"
          if [ $? -eq 0 ]; then
            echo "‚úÖ Application is running successfully"
          else
            echo "‚ùå Application failed to start"
            exit 1
          fi